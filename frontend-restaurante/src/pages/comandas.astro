---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import type { Comanda, Producto, Estado } from '../types/types';
import '../styles/global.css';

const urlParams = new URLSearchParams(Astro.url.search);
const localId = urlParams.get('id'); // Obtener el ID del restaurante desde la URL

// Hacer fetch para obtener las comandas
let comandas = [];
const responseComandas = await fetch(`http://localhost:5001/comandas?id=${localId}`);
comandas = await responseComandas.json();

// Hacer fetch para obtener los productos
const responseProducts = await fetch(`http://localhost:5001/menu?id=${localId}`);
const products = await responseProducts.json();

// Hacer fetch para obtener todos los estados
const responseStates = await fetch('http://localhost:5001/Estado');
const estados = await responseStates.json();

// Unir la información de las comandas con la información del producto
const comandasWithProductInfo = comandas.map((comanda: Comanda) => {
    // Buscar el producto relacionado con la comanda actual
    const productInfo = products.find((product: Producto) => product.id === comanda.productId);
    const stateInfo = comandas.find((state: Estado) => state.id === comanda.state.id);

    return {
        ...comanda,
        product: {
            id: productInfo.id,
            name: productInfo.name,
            price: productInfo.price,
            description: productInfo.description,
        },
        stateInfo,
    };
});
---

<script>

    import { io } from "socket.io-client";
    const socket = io('http://localhost:5001');

    document.querySelectorAll('select[name^="estado-"]').forEach((select) => {
        select.addEventListener('change', function (event) {
            const target = event.target as HTMLSelectElement; // Aserción de tipo
            const comandaId = parseInt(target.id.split('-')[1]); // Obtiene el ID de la comanda
            const productId = parseInt(target.id.split('-')[2]); // Obtiene el ID del producto
            const newStateId = parseInt(target.value);
            console.log("State changed");
            handleStateChange(comandaId, productId, newStateId);
        });
    });

    async function handleStateChange(comandaId: number, productId: number, newStateId: number) {
        // console.log('Estado cambiado:', comandaId, productId, newStateId);

        try {
            const response = await fetch('http://localhost:5001/comanda/estado', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: comandaId,
                    productId: productId,
                    stateId: newStateId,
                }),
            });

            if (!response.ok) {
                throw new Error('Error al actualizar el estado');
            }

            const result = await response.json();

            console.log('Respuesta del servidor:', result.message);
        } catch (error) {
            console.error('Error al realizar la petición:', error);
        }
    }
</script>

<Layout title="Comandas">
    <main>
        <h1>
            <span class="text-gradient">Comandas</span> recibidas
        </h1>
        <ul role="list" class="link-card">
            {
                comandasWithProductInfo.map((comanda: Comanda) => (
                    <li class="link-card">
                        <p>
                            Product ID: {comanda.product.id}, Name: {comanda.product.name}, Cantidad: {comanda.quantity},
                            {comanda.comments ? `Comments: ${comanda.comments}` : 'Sin detalles adicionales'}
                        </p>
                        <label for={`estado-${comanda.id}`}>Estado:</label>
                        <select id={`estado-${comanda.id}-${comanda.product.id}`} name={`estado-${comanda.id}`} value={comanda.state.id}>
                            {estados.map((estado: Estado) => (
                                <option value={estado.id}>{estado.description}</option>
                            ))}
                        </select>
                    </li>
                ))
            }
        </ul>
        {comandasWithProductInfo.length === 0 && <p>No hay comandas registradas.</p>}
    </main>
</Layout>

<style>
    .link-card {
        list-style: none;
        padding: 1rem;
        margin: 1rem 0;
        background-color: #23262d;
        border-radius: 7px;
        color: white;
    }
    .link-card p {
        margin: 0.5rem 0;
        display: inline-block; /* Para asegurarse de que todos los elementos estén en una sola línea */
    }
</style>
