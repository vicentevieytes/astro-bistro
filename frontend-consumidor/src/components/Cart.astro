---

import { OrderStatus, type OrderItem } from '../types/types';

interface RestaurantOrderItem extends OrderItem {
    restaurantId: string;
    restaurantName: string;
}

interface Props {
    initialItems?: RestaurantOrderItem[];
    userId: string;
}

const { initialItems = [] } = Astro.props;

// Group items by restaurant
const groupedItems = initialItems.reduce((acc, item: RestaurantOrderItem) => {
    if (!acc[item.restaurantId]) {
        acc[item.restaurantId] = {
            name: item.restaurantName,
            items: []
        };
    }
    acc[item.restaurantId].items.push(item);
    return acc;
}, {});

console.log(initialItems)
console.log(groupedItems);
const publicBackendUrl = import.meta.env.BACKEND_URL;

---

<div id="order-cart">
</div>

<script>
    import { io } from "socket.io-client";

    const socketUrl = import.meta.env.PUBLIC_SOCKET_URL;
    const socket = io(socketUrl);

    let cartItems = [];

    const backendUrl = import.meta.env.PUBLIC_BACKEND_URL;

    const cartDiv = document.getElementById('order-cart');
    const urlParams = new URLSearchParams(window.location.search);
    let userId = urlParams.get('userId'); // Retrieve userId from URL parameters

    let username = '';

    if (!userId) {
        console.error('User ID is missing in the URL.');
    } else {
        fetch(`${backendUrl}/users/${userId}`)
            .then(response => response.json())
            .then(data => {
                username = data.username;
            })
            .catch(error => console.error('Error fetching username:', error));
    }


    // Fetch cart items when the component mounts
    document.addEventListener('DOMContentLoaded', () => {
        // TODO: Replace this with actual user ID when you implement authentication
        socket.emit('fetchOrders', userId);
    });

    socket.on('cartFetched', (items) => {
        console.log(items);
        cartItems = items;

        renderCart();
    });

    socket.on('cartUpdated', (newItems) => { // Receive the newItems array
        console.log("Cart updated with new items:", newItems);

        newItems.forEach(newItem => {
            cartItems.push(newItem);
        });

        renderCart();
    });


    socket.on('orderStatusUpdated', ({ orderId, newStatus }) => {
        console.log("Order status update received", orderId, newStatus);
        // Find all items that belong to the updated order
        console.log(cartItems)
        const updatedItems = cartItems.filter(item => item.id === orderId);
        if (updatedItems.length > 0) {
            console.log("We are here")
            updatedItems.forEach(item => {
                item.status = newStatus;
            });
            renderCart();
        }
    });

    function renderCart() {
        console.log("We are rendering")
        if (cartDiv) {
            console.log("Rendering cart with items:", cartItems);

            let cartHTML = `
        <div class="localesCercanos">
            <h2 style="margin: 0 0 1rem 0; color: white;">Pedidos de ${username}</h2>
            <div style="
                display: grid; 
                grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
                gap: 1rem;
            ">
    `;

            // Group items by their id
            const groupedItems = cartItems.reduce((acc, item) => {
                if (!acc[item.id]) {
                    acc[item.id] = {
                        restaurantName: item.restaurantName,
                        items: [],
                        totalQuantity: 0,
                        totalPrice: 0,
                        status: item.status
                    };
                }
                acc[item.id].items.push(item);
                acc[item.id].totalQuantity += item.quantity;
                acc[item.id].totalPrice += item.price * item.quantity;
                return acc;
            }, {});

            // Status color mapping
            const statusColors = {
                'Aceptado': '#28a745', // Green
                'Aguardando aceptación': '#ffc107', // Yellow
                'Listo para ser retirado': '#20c997', // Teal
                'default': '#6c757d', // Gray
                'Rechazado': '#dc3545', // Red
                'En preparación': '#28a745' // Green
            };

            // Render each order
            Object.entries(groupedItems).forEach(([orderId, orderGroup]) => {
                const firstItem = orderGroup.items[0];
                const statusColor = statusColors[orderGroup.status] || statusColors['default'];

                cartHTML += `
            <div style="
                background: rgba(255,255,255,0.1);
                border-radius: 8px;
                padding: 0.75rem;
                color: white;
                display: flex;
                flex-direction: column;
                min-height: auto;
                max-height: 250px;
                height: fit-content;
                overflow: hidden;
            ">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 0.5rem;">
                    <h3 style="margin: 0; font-size: 1rem;">Pedido #${orderId}</h3>
                    <span style="
                        background-color: ${statusColor};
                        color: white;
                        padding: 0.2rem 0.4rem;
                        border-radius: 4px;
                        font-size: 0.7rem;
                    ">
                        ${orderGroup.status}
                    </span>
                </div>
                <p style="
                    margin: 0.25rem 0 0.5rem 0; 
                    color: rgba(255,255,255,0.7);
                    font-size: 0.8rem;
                    white-space: nowrap;
                    overflow: hidden;
                    text-overflow: ellipsis;
                ">${orderGroup.restaurantName}</p>
                <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem; font-size: 0.9rem;">
                    <span>${orderGroup.totalQuantity} unid.</span>
                    <span>Total: $${orderGroup.totalPrice.toFixed(2)}</span>
                </div>
                <ul style="
                    list-style-type: none;
                    padding: 0;
                    margin: 0;
                    border-top: 1px solid rgba(255,255,255,0.2);
                    padding-top: 0.5rem;
                    overflow-y: auto;
                    max-height: 150px;
                ">
                    ${orderGroup.items.map(item => `
                        <li style="
                            display: flex; 
                            justify-content: space-between;
                            margin-bottom: 0.25rem;
                            color: rgba(255,255,255,0.9);
                            font-size: 0.8rem;
                        ">
                            <span style="
                                white-space: nowrap;
                                overflow: hidden;
                                text-overflow: ellipsis;
                                max-width: 60%;
                            ">${item.name}</span>
                            <span>Cant: ${item.quantity}</span>
                        </li>
                    `).join('')}
                </ul>
            </div>
        `;
            });

            cartHTML += `
            </div>
        </div>
    `;

            cartDiv.innerHTML = cartHTML;
        }
    }

</script>
