---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import '../styles/global.css';

import Cart from '../components/Cart.astro';


import type { itemMenu, restaurante } from '../utils/CustomTypes';


const urlParams = new URLSearchParams(Astro.url.search);
let localId = urlParams.get('id');

let menuData: itemMenu[] = [];

let restauranteData: restaurante = {} as restaurante;

// TODO: Handle the case where the localId is invalid. Maybe show an error page.

if (localId) {
    const response = await fetch(`http://localhost:5001/menu?id=${localId}`),
        responseRestaurante = await fetch(`http://localhost:5001/local?id=${localId}`);
    restauranteData = (await responseRestaurante.json());
    menuData = await response.json();
}

console.log(menuData)
---

<Layout title="Hacer Pedido">
    <main>
        <Cart />
        <h1>
            Hacer un pedido en <span class="text-gradient" id="restaurant-name"></span>
        </h1>
        <form id="order-form" class="form-card">
            <div class="form-group">
                <label for="dish">Selecciona tu plato:</label>
                <select id="dish" name="dish" required>
                    <option value="">--Selecciona--</option>
                </select>
            </div>
            <div class="form-group">
                <label for="quantity">Cantidad:</label>
                <input type="number" id="quantity" name="quantity" min="1" required />
            </div>
            <button type="submit" class="submit-button">Agregar al pedido</button>
        </form>

        {/* Resumen del pedido */}
        <section class="order-summary">
            <h2>Resumen del Pedido</h2>
            <ul id="summary-list"></ul>
            <h3>Total: $<span id="total-price">0.00</span></h3>
        </section>
        <ul role="list" class="link-card-grid">
            <Card href="../" title="Ir a la pÃ¡gina principal" body="Volver a VerLaCarta" />
        </ul>

    </main>
</Layout>

<script>
    import { io } from "socket.io-client";

    const socket = io('http://localhost:5001');
    const orderForm = document.getElementById('order-form') as HTMLFormElement;
    const dishSelect = document.getElementById('dish');
    const restaurantNameSpan = document.getElementById('restaurant-name');

    async function updatePageContent() {
        const urlParams = new URLSearchParams(window.location.search);
        const localId = urlParams.get('id');

        if (localId) {
            try {
                const response = await fetch(`http://localhost:5001/menu?id=${localId}`);
                const menuData = await response.json();
                const restaurantResponse = await fetch(`http://localhost:5001/local?id=${localId}`);
                const restaurantData = await restaurantResponse.json();

                // Update restaurant name
                restaurantNameSpan.textContent = restaurantData.restaurant_name;

                // Update menu items
                dishSelect.innerHTML = '<option value="">--Selecciona--</option>';
                menuData.forEach((dish) => {
                    const option = document.createElement('option');
                    option.value = dish.item_id;
                    option.textContent = `${dish.name} - $${dish.price}`;
                    dishSelect.appendChild(option);
                });

                // Update form data attributes
                orderForm.dataset.localId = localId;
                orderForm.dataset.restaurantName = restaurantData.restaurant_name;
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }
    }

    // Call updatePageContent on initial load
    updatePageContent();

    // Listen for navigation events (e.g., back/forward buttons)
    window.addEventListener('popstate', updatePageContent);

    orderForm?.addEventListener('submit', (event) => {
        event.preventDefault();

        const quantityInput = document.getElementById('quantity');
        const dishId = dishSelect.value;
        const quantity = parseInt(quantityInput.value);

        const selectedDish = dishSelect.options[dishSelect.selectedIndex];

        if (selectedDish) {
            const dishName = selectedDish.textContent?.split(' - ')[0] || '';
            const dishPrice = parseFloat(selectedDish.textContent?.split(' - $')[1] || '0');

            const localId = orderForm.dataset.localId;
            const restaurantName = orderForm.dataset.restaurantName;

            // TODO: This is hardcoded for now:
            const userId = 1;

            const newItem = {
                id: dishId,
                userId: userId,
                name: dishName,
                price: dishPrice,
                quantity: quantity,
                restaurantId: localId,
            };

            console.log(localId);

            socket.emit('addToCart', newItem);
        }

        orderForm.reset();
    });
</script>


<style>
    .form-card {
        display: flex;
        flex-direction: column;
        background-color: #23262d;
        border-radius: 7px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        color: white;
        margin-bottom: 5px;
        display: block;
    }

    .form-group select,
    .form-group input,
    .form-group textarea {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background-color: #1f2124;
        color: white;
        transition: background-color 0.3s;
    }

    .form-group select:focus,
    .form-group input:focus,
    .form-group textarea:focus {
        background-color: #292d32;
        outline: none;
    }

    .submit-button {
        background-color: var(--accent-gradient);
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .submit-button:hover {
        background-color: rgba(255, 255, 255, 0.2);
    }
</style>
