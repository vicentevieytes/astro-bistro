---
import Card from '../components/Card.astro';
import Layout from '../layouts/Layout.astro';
import type { itemMenu, restaurante } from '../utils/CustomTypes';

const urlParams = new URLSearchParams(Astro.url.search);
const localId = urlParams.get('id'); // Obtener el ID del restaurante desde la URL

let menuData = [],
	restauranteData = [];
if (localId) {
	const response = await fetch(`http://localhost:5000/menu?id=${localId}`),
		responseRestaurante = await fetch(`http://localhost:5000/local?id=${localId}`);
	restauranteData = await responseRestaurante.json();
	menuData = await response.json(); // Obtener el menú desde el backend
}
---

<Layout title="Menú del Restaurante">
	<main>
		<h1>{(restauranteData[0] as restaurante).name}</h1>
		<ul
			role="list"
			class="link-card-grid">
			<Card
				href=`../local?id=${localId}`
				title="Volver"
				body="Volver a la página del restaurante"
			/>
			<Card
				href="../../"
				title="Ir a la página principal"
				body="Volver a VerLaCarta"
			/>
		</ul>

		{
			localId ? (
				<>
					{menuData.length > 0 ? (
						<ul>
							{menuData.map((item: itemMenu) => (
								<li>
									<h3>{item.name}</h3>
									<p>{item.description}</p>
									<p>
										<strong>Precio:</strong> ${item.price}
									</p>
								</li>
							))}
						</ul>
					) : (
						<p>No hay elementos en el menú.</p>
					)}
				</>
			) : (
				<p>No se ha proporcionado un ID de restaurante válido.</p>
			)
		}
	</main>
</Layout>

<style>
	ul {
		list-style: none;
		padding: 0;
	}
	li {
		margin-bottom: 1.5em;
		background: rgba(255, 255, 255, 0.1); /* Fondo semitransparente */
		padding: 1em;
		border-radius: 10px;
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
	}
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.localesCercanos {
		text-align: center;
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
